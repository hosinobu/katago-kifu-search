#packopt name "KataGo棋譜検索"
#packopt icon "original.ico"
#define window_file_name "window.txt"

gsel 0,-1

#ifdef _debug
	dirname = "C:\\Users\\owner\\Desktop\\hsp"
#else
	dirname = dir_exe
#endif
kifu_dirname = dirname + "/棋譜"

chdir dirname

exist window_file_name

if strsize == -1{
	x = 1140
	y = 855
	sx = x
	sy = y
	wx = (ginfo(20) - x) / 2
	wy = (ginfo(21) - y) / 2
	//探索の最大深さ
	max_depth = 50
	
	//色反転を含めるか
	enableColorFlip = 1
	
	//星を表示するか
	view_hosi@goban = 0
	
	//棋譜を何手目から表示するか
	kifu_start_num = 5

	//棋譜再生速度(ms)
	auto_interval = 1000
}else{
	notesel s
	noteload window_file_name
	tmp = 0
	noteget_ x
	noteget_ y
	noteget_ wx
	noteget_ wy
	noteget_ sx
	noteget_ sy
	noteget_ max_depth
	noteget_ enableColorFlip
	noteget_ view_hosi@goban
	noteget_ kifu_start_num
	noteget_ auto_interval
	noteunsel
}
#module
#deffunc noteget_ var a
	noteget a, tmp
	a = int(a)
	tmp++
	return
#global
screen 2, ginfo(20), ginfo(21),,wx,wy,sx,sy

onexit *save_window_size
if 0{ *save_window_size
	chdir dirname
	sdim s
	notesel s
	noteadd str(ginfo(10)) //ウィンドウサイズ
	noteadd str(ginfo(11))
	noteadd str(ginfo(4)) //ウィンドウ位置
	noteadd str(ginfo(5))
	noteadd str(ginfo(12))　//描画領域サイズ
	noteadd str(ginfo(13))
	noteadd str(max_depth)
	noteadd str(enableColorFlip)
	noteadd str(view_hosi@goban)
	noteadd str(kifu_start_num)
	noteadd str(auto_interval)
	notesave window_file_name
	end
}
#include "modules/sgf2.hsp"
#include "go_game_manager.hsp"
#include "modules/katago_sqr2.hsp"
#include "modules/keyfps.hsp"
#include "GobanPatternManager.hsp"
#include "Search_pattern.hsp"
#include "shuffle_notepad.hsp"
#include "modules/grid_system/area_grid_system.hsp"
#include "modules/grid_system/g_button.hsp"
#include "modules/grid_system/g_chkbox.hsp"
#include "modules/grid_system/g_listbox.hsp"
#include "modules/grid_system/g_slider.hsp"
#include "modules/grid_system/g_stepper.hsp"
#include "hspext.as"


chdir kifu_dirname

randomize

header_size = 40
pos , header_size


//使用キーの宣言
delkey_all
addkey 1 //左クリック
addkey 2 //右クリック
addkey 17 //ctrl
addkey 'C'
addkey 'V'


v = "" //矩形選択用

jidou = 0
着手番号表示 = 0

set_treeview 50,50
set_treeview_position 20,20
set_tree_direction 6

kifu_upadate = 1

topnode = -1

//エリア作成
root = make_area(1,2)
	header_area = make_area()
	body_area = make_area(2,1)
		goban_area = make_area(1,2)
			goban_body_area = make_area()
			goban_footer = make_area(8): set_margin goban_footer,2,5
				back_top = make_area()
				back_one = make_area()
				back_ten = make_area()
				go_ten = make_area()
				go_one = make_area()
				go_end = make_area()
				button_clearboard = make_area()
				chkbox_tyakusyu = make_area()

				
		sidebar_area = make_area(1,3)
			sidebar_kifulist = make_area()
			sidebar_kifulist_result = make_area(1,2)
				sidebar_kifulist_match = make_area()
				sidebar_kifulist_buttons = make_area(2,2)
					sidebar_kifulist_match_back = make_area()
					sidebar_kifulist_match_next = make_area()
					chkbox_autoplay = make_area()
					slider = make_area()
			sidebar_buttons = make_area(2,4)
				button_loadfile = make_area()
				button_getsgf = make_area()
				button_getsgf_nowpoint = make_area()
				button_search = make_area()
				chkbox_colorflip = make_area()
				chkbox_view_hosi = make_area()
				kifustart = make_area()
				
//親子関係構築
push_grid_child root , header_area
push_grid_child root , body_area

	push_grid_child body_area, sidebar_area
		push_grid_child sidebar_area, sidebar_buttons
			push_grid_child sidebar_buttons, button_loadfile
			push_grid_child sidebar_buttons, button_getsgf
			push_grid_child sidebar_buttons, button_getsgf_nowpoint
			push_grid_child sidebar_buttons, button_search
			push_grid_child sidebar_buttons, chkbox_colorflip
			push_grid_child sidebar_buttons, chkbox_view_hosi
			push_grid_child sidebar_buttons, kifustart
			
			
		push_grid_child sidebar_area, sidebar_kifulist
		push_grid_child sidebar_area, sidebar_kifulist_result
			push_grid_child sidebar_kifulist_result, sidebar_kifulist_match
			push_grid_child sidebar_kifulist_result, sidebar_kifulist_buttons
				push_grid_child sidebar_kifulist_buttons, sidebar_kifulist_match_back
				push_grid_child sidebar_kifulist_buttons, sidebar_kifulist_match_next
				push_grid_child sidebar_kifulist_buttons, chkbox_autoplay
				push_grid_child sidebar_kifulist_buttons, slider

	push_grid_child body_area, goban_area

		push_grid_child goban_area, goban_body_area
		push_grid_child goban_area, goban_footer

			push_grid_child goban_footer, back_top
			push_grid_child goban_footer, back_ten
			push_grid_child goban_footer, back_one
			push_grid_child goban_footer, go_one
			push_grid_child goban_footer, go_ten
			push_grid_child goban_footer, go_end
			push_grid_child goban_footer, chkbox_tyakusyu
			push_grid_child goban_footer, button_clearboard




exist "area.var"
if strsize >= 0{
	save_load_manager_load
}
//実体作成
newmod g_buttons, grid_button, "最新棋譜を取得", *loadfile, button_loadfile
newmod g_buttons, grid_button, "SGF取得"   , *getsgf  , button_getsgf
newmod g_buttons, grid_button, "SGF取得(現局面)", *getsgf_nowpoint, button_getsgf_nowpoint
newmod g_buttons, grid_button, "クリア"  , *clearboard, button_clearboard
newmod g_buttons, grid_button, "検索"          , *create_pattern, button_search
newmod g_buttons, grid_button, "次の棋譜"  , *next_kifu, sidebar_kifulist_match_next
newmod g_buttons, grid_button, "前の棋譜"  , *back_kifu, sidebar_kifulist_match_back
newmod g_buttons, grid_button, "|<",*to_sgftop, back_top
newmod g_buttons, grid_button, "<<", *back10, back_ten
newmod g_buttons, grid_button, "<", *move_back, back_one
newmod g_buttons, grid_button, ">", *move_next, go_one
newmod g_buttons, grid_button, ">>", *go10, go_ten
newmod g_buttons, grid_button, ">|",*to_sgfend,go_end

newmod g_chkbox, grid_checkbox, mode           , "着手" , chkbox_tyakusyu
newmod g_chkbox, grid_checkbox, enableColorFlip,"色反転", chkbox_colorflip
newmod g_chkbox, grid_checkbox, jidou          ,"自動再生",chkbox_autoplay
newmod g_chkbox, grid_checkbox, view_hosi@goban,"星表示", chkbox_view_hosi

newmod g_stepper, grid_stepper, kifu_start_num,kifustart

newmod g_slider, grid_slider, auto_interval, 1, slider, 100, 2000, 15, 12

newmod kifulist, grid_listbox, sidebar_kifulist
newmod kifulist, grid_listbox, sidebar_kifulist_match: matchlist = stat

newmod board, goban, 19,19,26,26, goban_body_area

newmod t, treebox


//矩形範囲指定用
rn = 0
dim rect, 4
dim rect_stack, 4


foreach kifulist
	set_listbox_item_ysize kifulist.cnt, 20
loop
gosub*load_kifu_folder
	
gosub*loadsgf

c_list = "0.50"

pretime = keyfpstime
setfps 60
*main
	manage_keyfps

	new_ = get_in_area()
	if pre_ != new_{
		pat = keyfpstime
		pre_ = new_
	}

	if keyfpstime - pat >= 3000{
		//毎フレーム１棋譜読み込む
		filelist = get_name_all_items(kifulist)
		notesel filelist
			repeat
				noteget sgf_file_name, nextindex
				nextindex++
				if sgf_file_name == "": break
				if get_value(sgf_file_name) == NOT_DEFINED_HASH{
					notesel sgf
						noteload sgf_file_name
						logmes "loaded sgf ->"+ sgf_file_name
						new_value sgf_file_name, str(load_sgf(sgf, -1)) //ファイル名とトップノードの番号を紐づける
					noteunsel
					break
				}
			loop
		noteunsel
		;/*/
	}
	
	nownode = get_current_node(t)
	getBoardCoordinates board, point

	in_board = 0
	if 0 <= point && point < 19{
		if 0 <= point.1 && point.1 < 19{
			in_board = 1
		}
	}
	if debugmode == 0{
		//マウス操作
		if _getkey(2) == 1{ //右クリック
			if treebox_onmouseid(t) >= 0{
				set_current_node t, treebox_onmouseid(t)
				Treebox_toggle_openflag t, treebox_onmouseid(t)
			}
			if mode == 0{//矩形描画モード
				if rn > 0{
					rn--
					modify_coordinates_by_rect v, rect_stack(0,rn), rect_stack(1, rn), rect_stack(2, rn), rect_stack(3, rn), 1
				}
			}
		}
		if _getkey(1) == 1{ //左クリック

			pat = keyfpstime
	
			inlistbox = 0
	
			foreach kifulist
				sel = listbox_on_id(kifulist.cnt,mousex, mousey)
				inlistbox += select_kifulist_item(sel, cnt)
	
				if sel == -3{
					set_current_scroll_index_by_bar_position kifulist.cnt, mousey
				}
			loop
			
			if inlistbox == 0{
				dragging_flag = 1
				get_treeview_position tmp
				dragstartx = mousex - tmp
				dragstarty = mousey - tmp.1
					if treebox_onmouseid(t) >=0{
	
						clicked_node = stat
	
						logmes "select_TreeID== "+clicked_node + " ( " + get_tree_item_id(clicked_node) +" ) "　 + length(SGF_NODE@global)
	
						set_current_node t, clicked_node 			
						sync_treebox_board t, board 
					}
		
				if mode = 0{//矩形描画モード
					if in_board{
						rect = limit(point,0,18),limit(point.1,0,18)
						rect(2) = rect, rect.1
					}else{
						rect = -1
					}
				}else{
				
					if treebox_onmouseid(t) < 0{
						if in_board{
							着手 board, point, point.1
							
							if stat{　//着手成功
								dragging_flag = 0
								
								if nownode = -1{ //棋譜未選択状態なら
	
									make_tree_topnode t
									nownode = stat
									topnode = nownode
									
								}
								
								now_sgfnode = get_tree_item_id(nownode)
								logmes now_sgfnode
								
	
								//指定した座標のノードを作成、すでにあればそれを返す
								new = make_SGFnode(now_sgfnode, point, get_turn_SGFstr(逆手番(get_turn(board))))
	
								//現在のツリーノード直下にそのSGFノードがあるか？あれば、そのノードを取得
								new_treeID = serch_tree_child_by_item_ID(nownode, new)
								
								if new_treeID == -1{
									//新たにツリーノードを作る
									new_treeID = make_treenode(nownode, new)
									if now_sgfnode == -1: topnode = new_tree_ID
								}
								set_current_node t, new_treeID
							}
						}
					}
				}
			}
		}
	
		if dragging_flag{
			
			if mode = 0{
				rect(2) = limit(point(0),0,18)
				rect(3) = limit(point(1),0,18)
			}else{
				set_treeview_position mousex - dragstartx, mousey - dragstarty
			}
			
			if _getkey(1) == -1{//マウスが離されたとき
				
				dragging_flag = 0
				if mode = 0 && rect(0) >= 0{
					modify_coordinates_by_rect v, rect(0), rect(1), rect(2), rect(3)
					rect_stack(0,rn) = rect(0), rect(1), rect(2), rect(3)
					rn++
					dim rect,4
				}
			}
		}
	
		//マウスホイール
		mw = mousew
	
		in_kifulist == 0
		foreach kifulist
			if listbox_on_id(kifulist.cnt,mousex, mousey) >= 0{
				in_kifulist++
				if mw < 0: move_scroll_index kifulist.cnt,1
				if mw > 0: move_scroll_index kifulist.cnt,-1
			}
		loop
		if in_kifulist == 0{
			if mw < 0 : gosub*move_next
			if mw > 0 : gosub*move_back
		}
	
		//キー操作
		if _getkey(17) >= 1{ //CTRL
			if _getkey('C') == 1 { //CTRL + C
				gosub*getsgf
			}
			if _getkey('V') == 1 { //CTRL + V
				gosub*loadsgf
			}
		}
	
		//自動再生
		if jidou & pretime + auto_interval <= keyfpstime{
			
			gosub *move_next
		}
		
	}

	color 128,128,128:boxf 0,0,ginfo_winx, ginfo_winy
	a = double(c_list) * 255: color a,a,a
	get_rect goban_body_area, goban_back_rect
	boxf goban_back_rect, goban_back_rect.1,goban_back_rect.2, goban_back_rect.3
	
	碁盤表示 board , 着手番号表示, 20
	draw_set_list_on_board board, v
	
	treebox_draw t
	foreach kifulist
		my_listbox_draw kifulist.cnt
	loop
	foreach g_chkbox
		draw_g_chkbox g_chkbox.cnt
	loop
	foreach g_buttons
		draw_g_button g_buttons.cnt
	loop
	foreach g_slider
		slider_manager g_slider.cnt
	loop
	foreach g_stepper
		draw_g_stepper g_stepper.cnt
	loop

	if dragging_flag && rect >= 0:碁盤に矩形データを表示 board, rect

	if getdbl_ms(17,250): debugmode ^ 1
	
	draw_all_rect root, debugmode

	redraw
	redraw 2
	
	goto*main
#defcfunc select_kifulist_item int itemid, int kifulist_id
	
	if itemid >= 0 && itemid < get_item_num(kifulist.kifulist_id){
		current_kifulist = kifulist_id
		if get_root_tree_node(t) >= 0{
			del_treenode(get_root_tree_node(t))
		}

		//範囲指定を初期化
		sdim v
		rn = 0

		//アイテムにチェックを付ける
		check_item kifulist.kifulist_id, itemid, 1
		
		items = get_listbox_item_list(kifulist.kifulist_id)
		notesel items
		noteget s, itemid
		noteunsel
		topnode = change_sgf(s, t, board)
		logmes "kifuclick -> "+ topnode
		
		if get_listbox_item_data(kifulist.kifulist_id,itemid){ //アイテムデータが設定されていたら、それは検索結果。
			nstat = stat //検索結果のSGFノード
			//それが格納されているツリーIDを探してカレントノードに設定
			set_current_node t, search_tree_by_item_id(get_root_tree_node(t), nstat)

		}else{
			nownode = get_root_tree_node(t)
			repeat kifu_start_num
				gosub*move_next
			loop
		}

		gosub*syncboard
		
		set_treeview_position 20,20
		
		return 1
	}
	return 0
*next_kifu
	logmes "NEXT"
	a = get_selected_items(kifulist(current_kifulist), sel)
	a = select_kifulist_item(sel + 1, current_kifulist)
	return
*back_kifu
	logmes "BACK"
	a = get_selected_items(kifulist(current_kifulist), sel)
	a = select_kifulist_item(sel - 1, current_kifulist)
	return
*go10
	repeat 10
		gosub*move_next
	loop
	return
	
*back10
	repeat 10
		gosub *move_back
	loop
	return
*to_sgftop
	set_current_node t
	gosub*syncboard
	return
*to_sgfend

	if topnode < 0: return
	repeat 1000
		gosub *move_next
		if stat == 0:break
		if cnt == 999: logmes "おそらくエラー"
	loop
	gosub*syncboard
	return
	
*clearboard
	clear_board board
	treebox_clear t
	topnode = stat
	title ""
	current_kifulist = -1
	return
*getsgf
	if topnode >= 0{
		get_node_sgf topnode, a
		clipset a
	}
	return
*getsgf_nowpoint
	logmes get_tree_item_id(nownode)
	get_node_sgf_nowpoint get_tree_item_id(nownode), a
	clipset a
	return
*loadsgf
	newmod t, treebox
	sdim s, $FFFF
	clipget s, varsize(s)
	if load_sgf(s,-1) < 0: return
	topnode = load_sgf_set_board(t, stat, board)
	
	blackplayer = get_property_data(topnode, "PB")
	whiteplayer = get_property_data(topnode, "PW")

	title" 黒 " + blackplayer + "   白 " + whiteplayer
	return

*create_pattern
	logmes "検索開始"
	time = keyfpstime
	initialize_rects v,r, stones
	
	repeat load_stones_from_board(board, n)
		add_stone_pattern r, stones, n(0,cnt), n(1,cnt), n(2,cnt)
	loop

	create_pattern_with_rects_and_stones r,stones,p

	logmes patterns_to_notepad(p)


	result_num = search(get_name_all_items(kifulist), p, search_result, max_depth, enableColorFlip, kifu_update)
	kifu_update = 0


	search_result_sgflist = ""
	
	repeat result_num
		search_result_sgflist += search_result(0, cnt) + "\n"
	loop

	if search_result_sgflist != ""{

		sortnote search_result_sgflist, 1 //結果を最新棋譜順にソート
		current_kifulist = matchlist
	}

	del_item_all kifulist.matchlist
	add_item kifulist.matchlist, search_result_sgflist
	
	repeat result_num
		sortget n, cnt
		add_item_data kifulist.matchlist, cnt, search_result(1,n)
	loop

	logmes "検索終了 -> " +(keyfpstime - time) + "ms  " + result_num + "件の検索結果"
	
	return
	
*loadfile
	
	棋譜取得 kifu_dirname, 40 // katagoホームページから最新棋譜をダウンロード
	notesel files

	dirlist files,"*.sgf"
	add_item kifulist, files

	notesel files
	sortnote files,1
	noteget s,0

	topnode = change_sgf(s,t,board)

	gosub*load_kifu_folder
	
	return

*move_next
	if nownode < 0: return

	set_current_node t, get_tree_root_child(nownode)
	moved = stat
	if stat: treeview移動 1
	pretime = keyfpstime
	gosub*syncboard
	return moved
	
*move_back
	if nownode < 0: return
	if get_tree_parent(nownode) != -1{
		set_current_node t, get_tree_parent(nownode)
		pretime = keyfpstime
		treeview移動 -1
	}
	pretime = keyfpstime
	gosub*syncboard
	return
	
*syncboard
	nownode = get_current_node(t) 
	sync_treebox_board t, board
	tmp = get_property_data(get_tree_item_id(nownode), "C")
	:logmes "sync -> "+topnode + "::"+ get_tree_item_id(nownode) + "   "+tmp
	if get_tree_item_id(nownode) == topnode: tmp = "0.50"
	split tmp," ", c_list
	
	return
	
*load_kifu_folder
	treebox_clear t
	chdir kifu_dirname
	del_item_all kifulist
	dirlist files,"*.sgf"
	add_item kifulist, shuffle_notepad(files)
	nextindex = 0
	kifu_update = 1
	return
	
#deffunc treeview移動 int ddd
	get_treeview_node_size ns 
	if (get_tree_direction() & 1){
		move_treeview_position , ns.1 * -(((get_tree_direction() & 2) != 0) * 2 - 1) * ddd
	}else{ 
		move_treeview_position   ns   * -(((get_tree_direction() & 2) != 0) * 2 - 1) * ddd

		get_treeview_position a
		if a >= 20: set_treeview_position 20,20
	}
	return