
#ifndef GobanPatternManager

#include "goban.hsp"
#include "modules/rotate_coordinate.hsp"
#module GobanPatternManager

#const global PATTERN_NONE 1
#const global PATTERN_ANY_COLOR 0xFFFFFFFF & (PATTERN_NONE ^-1)
#const global PATTERN_BLACK 1 << 1
#const global PATTERN_WHITE 1 << 2
#const global PATTERN_RED   1 << 3
#const global PATTERN_GREEN 1 << 4
#const global PATTERN_BLUE  1 << 5
#const global PATTERN_YELLOW 1 << 6
#const global PATTERN_ORANGE 1 << 7
#const global PATTERN_PURPLE 1 << 8


#defcfunc bit_to_color_names int color_bits, local i
    i = ""

    if color_bits & PATTERN_NONE{
	    i += "NONE,"
	}
	
    if (color_bits & PATTERN_ANY_COLOR) == PATTERN_ANY_COLOR{
	    i += "ALL_COLOR"
	    return i
	}
	
    if color_bits & PATTERN_BLACK  { i += "BLACK," }
    if color_bits & PATTERN_WHITE  { i += "WHITE," }
    if color_bits & PATTERN_RED    { i += "RED," }
    if color_bits & PATTERN_GREEN  { i += "GREEN," }
    if color_bits & PATTERN_BLUE   { i += "BLUE," }
    if color_bits & PATTERN_YELLOW { i += "YELLOW," }
    if color_bits & PATTERN_ORANGE { i += "ORANGE," }
    if color_bits & PATTERN_PURPLE { i += "PURPLE," }
    
    return strtrim(i, 2, ',') // 最後のカンマを除去

//パターンバリデーション
#define global ctype pattern_validation(%1) \
		( \
		((%1) != PATTERN_NONE) && \
		((%1) != (PATTERN_NONE | PATTERN_ANY_COLOR)) && \
		((%1) != (PATTERN_ANY_COLOR & PATTERN_NONE)) \
		)

#defcfunc load_stones_from_board var board, array a

	/*
	board:
	-ボードオブジェクト
	a:
	-(x:y:bits)形式の石情報の結果が返る、数値の配列
	*/

	get_board_data board, b

	dim a, 3
	an = 0

	repeat length(b): m = cnt
		repeat length2(b)
			switch b(m,cnt)
			case 1 //黒石
				a(0, an) = m, cnt, PATTERN_BLACK
				an++
			swbreak
			case 2 //白石
				a(0, an) = m, cnt, PATTERN_WHITE
				an++
			swbreak
			//特殊条件
			case 3
				a(0, an) = m, cnt, PATTERN_BLACK | PATTERN_WHITE
			swbreak
			case 4
				a(0, an) = m, cnt, PATTERN_NONE | PATTERN_BLACK
			swbreak
			case 5
				a(0, an) = m, cnt, PATTERN_NONE | PATTERN_WHITE
			swbreak
			swend
		loop
	loop
	
	return an

#deffunc initialize_rects var rect_set, array rects, array stones
	//矩形を作成
	num_rects = create_rect_from_coordinate_set(rect_set, rects)
	//矩形に合わせて、石情報リストを初期化
	sdim stones,, num_rects
	return

//石情報リストに石を追加
#deffunc add_stone_pattern array rects, array stones, int x, int y, int col, local i
    /*
    rects:
    - 矩形リスト (x1, y1, x2, y2)
    stones:
    - 矩形ごとの石情報リスト (初期化済みであること)
    x, y:
    - 石の座標
    col:
    - 検索する石パターン。例【　(PATTERN_BLUE | PATTERN_RED)　-> 青か赤ならマッチ 】
    */


	stone_info = strf("%02d:%02d:%d", x, y, col ^ (PATTERN_BLACK | PATTERN_WHITE))
	repeat length2(rects)
	
		x1 = rects(0,cnt)
		y1 = rects(1,cnt)
		x2 = rects(2,cnt)
		y2 = rects(3,cnt)
		
		if x >= x1 && x <= x2 && y >= y1 && y <= y2{

				if strlen(stones(cnt)) == 0{
					stones(cnt) = stone_info
				}else{
					stones(cnt) += "-" + stone_info
				}
			
			break
		}
	loop

	return

//矩形リストと石情報リストから基本パターンを生成
#deffunc create_pattern_with_rects_and_stones array rects, array stones, array patterns

    sdim patterns,,length2(rects), 3, 2

    repeat length2(rects)
    	//---矩形データ
        patterns(cnt,0,0) = "" + rects(0, cnt) + "," + rects(1, cnt) + "," + rects(2, cnt) + "," + rects(3, cnt)
        patterns(cnt,0,1) = patterns(cnt,0,0)

		//---石データ(x:y:bits)形式
    	//色反転を作成
     	s = ""
     	split stones(cnt),"-",stone_data
     	info_num = stat
     	none_count = 0
        repeat info_num
      		if cnt != 0: s += "-"
        	split stone_data(cnt),":",tmp
        	none_count += (int(tmp.2) & PATTERN_NONE) != 0
			s += tmp.0 + ":" + tmp.1 + ":" + str(int(tmp.2) ^ (PATTERN_BLACK | PATTERN_WHITE))
        loop
        

        patterns(cnt,1,0) = stones(cnt)
		patterns(cnt,1,1) = s
		logmes stones(cnt)
		logmes s
        
        //---必要マッチ数の情報
		if stones(cnt) == ""{
			patterns(cnt,2,0) = "0"
			patterns(cnt,2,1) = "0"
		}else{
			patterns(cnt,2,0) = str(info_num - none_count)
			patterns(cnt,2,1) = patterns(cnt, 2, 0)
		}
    loop
    return

#defcfunc get_pattern_all_stones_num array a, local i
	
	repeat length(a)
		i += int(a(cnt,2))
	loop

	return i


//生成したパターンを可視化（ログ出力用)
#defcfunc patterns_to_notepad array a
	notesel s
	s = "["
	repeat length(a)
		noteadd a(cnt, 0)  + "@" + a(cnt, 1) + "@" + a(cnt, 2)
	loop
	noteadd "]"
	noteunsel
	return s

//基本パターンとボードサイズを受け取り８または４パターン化する関数
#deffunc make_rotated_patterns array a, int board_size_x, int board_size_y , array result
    /*
    a:
    - 基本パターン
    x, y:
    - 探索対象のボードサイズ
    result:
    - 座標変換を行ったパターンリスト
    */

	num_rotate_patterns = 8
	if board_size_x != board_size_y: num_rotate_patterns = 4
	
	sdim result,, length(a), length2(a), length3(a), num_rotate_patterns
	
    repeat num_rotate_patterns
    	t_pattern = cnt
    	//パターン内の各矩形に対して

		for r,,length(a)
		
			//矩形データ変換
			split a(r,0), ",", tmp
			x1 = int(tmp)
			y1 = int(tmp.1)
			x2 = int(tmp.2)
			y2 = int(tmp.3)

			rotate_rectangle rect, x1, y1, x2, y2, t_pattern, board_size_x, board_size_y

			rect_str = "" + rect(0) + "," + rect(1) + "," + rect(2) + "," + rect(3)
			
			//色反転
			for i,,2
			
				
				//石データ変換
				split a(r,1,i), "-", stone_datas
				sdata = ""
				repeat stat
					split stone_datas(cnt),":", tmp
					sn = stat
					x = int(tmp)
					y = int(tmp.1)
					col = tmp.2

					rotate_coordinate p, x, y, t_pattern, board_size_x, board_size_y

					if sdata = ""{
						sdata = "" + p + ":" + p(1) + ":" + col
					}else{
						sdata += "-" + p + ":" + p(1) + ":" + col
					}
				loop

				result(r,0,i,t_pattern) = rect_str //矩形情報
				result(r,1,i,t_pattern) = sdata    //石データ
				result(r,2,i,t_pattern) = a(r,2) //石数データ
				
			next
		next
    loop

	return
#global
#endif

/*
patternの構造（四次元）
矩形番号、石情報（３種類）、色反転してるかのフラグ（0or1)、回転（0-7)
*/
