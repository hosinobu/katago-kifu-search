#ifndef SGF_NODE
#include "sgf_properties.hsp"
#include "keyfps.hsp"
dimtype SGF_NODE@global, 5

#module SGF_NODE 親ノード, 子ノード, 子ノードの数, properties,properties_data, properties_num, x, y, turn

#define global make_new_SGFnode(%1) newmod SGF_NODE@global,SGF_NODE, %1
#modinit int parent, local thismod_ID

	親ノード = parent
	
	sdim properties_data
	
	x = -1
	y = -1
	turn = -1
	
	mref thismod_ID, 2
	return thismod_ID
	
//--情報取得
#define global ctype get_SGFparent(%1) _get_SGFparent(SGF_NODE@global(%1))
#modcfunc _get_SGFparent
	return 親ノード

#modfunc get_nodeinfo array a
	repeat properties_num
		a(0,cnt) = property_number_to_str(properties(cnt))
		a(1,cnt) = properties_data(cnt)
	loop
	return properties_num

#define global ctype get_property_data(%1, %2) _get_property_data(SGF_NODE@global(%1), %2)
#modcfunc _get_property_data str s1
	tmp = ""
	if s1 == "B" || s1 == "W"{
		if turn != -1{
			tmp = "  "
			poke tmp, 0, 'a' + x
			poke tmp, 1, 'a' + y
		}
	}else{
		repeat properties_num
			if property_number_to_str(properties(cnt)) == s1{
				tmp = properties_data(cnt)
				break
			}
		loop
	}
	return tmp

#defcfunc get_property_coordinate int p1, array result

	dim result,2
	if get_property_data(p1, "B") != ""{
		tmpr = refstr
		result = peek(tmpr,0) - 'a', peek(tmpr,1) - 'a'
		
		return 1
	}else: if get_property_data(p1, "W") != ""{
		tmpr = refstr
		result = peek(tmpr,0) - 'a', peek(tmpr,1) - 'a'
		return 2
	}
	return 0
#define global ctype get_property_coordinate_cash(%1,%2) _get_property_coordinate_cash(SGF_NODE@global(%1),%2)
#modcfunc _get_property_coordinate_cash array result
	result = x,y
	return turn

#define global get_nodelist(%1, %2, %3 = 0) dim %2:_get_nodelist SGF_NODE@global(%1), %2, %3
#modfunc _get_nodelist array a, int num, local thismod_ID
	mref thismod_ID, 2
	a(num) = thismod_ID
	if 親ノード != -1: _get_nodelist SGF_NODE@global(親ノード), a, num + 1
	return

#define global ctype get_SGF_childs(%1, %2) _get_SGF_childs(SGF_NODE@global(%1), %2)
#modcfunc _get_SGf_childs array a
	dim a, 子ノードの数
	memcpy a, 子ノード, 子ノードの数*4
	return 子ノードの数

#define global cut_node(%1) _cut_node(SGF_NODE@global(%1))
#modfunc _cut_node local i
	for i,, 子ノードの数
		cut_node 子ノード(i)
	next
	delmod thismod
	return

#define global set_property_data(%1,%2,%3) _set_property_data SGF_NODE@global(%1), %2, %3
#modfunc _set_property_data str s, str d

	if s == "B"{
		turn = 1
		tmp = d
		x = peek(tmp, 0) - 'a'
		y = peek(tmp, 1) - 'a'
	}else: if s == "W"{
		turn = 2
		tmp = d
		x = peek(tmp, 0) - 'a'
		y = peek(tmp, 1) - 'a'
	}else{
		already_exist = 0
		repeat properties_num
			if property_number_to_str(properties(cnt)) == s{
				index = cnt
				properties_data(cnt) = d
				already_exist++
				break
			}
		loop
		if already_exist == 0{
			index = properties_num
			properties(properties_num) = property_str_to_number(s)
			properties_data(properties_num) = d
			properties_num++
		}
	}
	
	return

#modfunc set_move_info str s1, str s2
	properties(properties_num) = get_property_str(s1)
	properties_data(properties_num) = s2
	properties_num++
	return
	
#modcfunc serch_SGFchild int p1
	result = -1
	repeat 子ノードの数
		if 子ノード(cnt) == p1{
			result = cnt
			break
		}
	loop
	return result

#define global ctype serch_SGFchild_byxy(%1,%2,%3) _serch_SGFchild_byxy(SGF_NODE@global(%1), %2, %3)
#modcfunc _serch_SGFchild_byxy str s1, str s2
	result = -1
	repeat 子ノードの数
		if get_property_data(子ノード(cnt), s1) == s2{
			result = 子ノード(cnt)
			break
		}
	loop
	return result

#define global add_SGFchild(%1,%2) _add_SGFchild SGF_NODE@global(%1), %2
#modfunc _add_SGFchild int p1

	if serch_SGFchild(thismod, p1) == -1{
		子ノード(子ノードの数) = p1
		子ノードの数++
	}
	
	return

#modfunc del_SGFchild int p1

	if serch_SGFchild(thismod, p1) >= 0{
		memcpy 子ノード, 子ノード, 子ノードの数 - stat - 1 << 2, stat << 2
		子ノードの数--
	}
	return

#modcfunc get_rootnode local thismod_ID
	if 子ノードの数 == 0{
		mref thismod_ID, 2
		return thismod_ID
	}
	return 子ノード


#deffunc get_node_sgf int p1, var s
	s = "("
	_get_node_sgf SGF_NODE@global(p1), s
	s += ")"
	return

#modfunc _get_node_sgf var s, local i

	s += ";"
	
	if turn != -1{
		座標 = "  "
		poke 座標, 0, 'a' + x
		poke 座標, 1, 'a' + y
		
		if turn == 1{
			s += "B[" + 座標 + "]"
		}else{
			s += "W[" + 座標 + "]"
		}	
	}

	repeat properties_num
		s += property_number_to_str(properties(cnt)) + "[" + properties_data(cnt) + "]"
	loop
	
	for i,, 子ノードの数
	
		if 子ノードの数 >= 2{
			s+="("
		}
		
		_get_node_sgf SGF_NODE@global(子ノード(i)), s
		
		if 子ノードの数 >= 2{
			s+=")"
		}
	next

	return

//特定のノードまでのSGFを取得
#deffunc get_node_sgf_nowpoint int p1, var s, local i
	logmes "get_node_sgf_nowpoint -> " + p1
	get_nodelist p1, a
	s = "("
	for i, length(a)-1,-1,-1
		s += get_node_sgf_nowpoint_main(SGF_NODE@global(a(i)))
	next
	s += ")"
	logmes s
	return s
#modcfunc get_node_sgf_nowpoint_main local i
	i = ";"
	if turn != -1{
		座標 = "  "
		poke 座標, 0, 'a' + x
		poke 座標, 1, 'a' + y
		if turn == 1{
			i += "B[" + 座標 + "]"
		}else{
			i += "W[" + 座標 + "]"
		}	
	}
	repeat properties_num
		i += property_number_to_str(properties(cnt)) + "[" + properties_data(cnt) + "]"
	loop
	return i

#modfunc set_root int p1

	repeat 子ノードの数
		if 子ノード(cnt) == p1{
			memcpy 子ノード,子ノード, cnt * 4, 4
			子ノード(0) = p1
		}
	loop
	
	return

#modfunc set_root_thisnode local thismod_ID
	mref thismod_ID, 2
	set_root SGF_NODE@global(親ノード), thismod_ID //このノードが親の子ノードリストの最上位になる
	if get_SGFparent(親ノード) ! -1{ //親ノードが親を持っていたら
		set_root_thisnode SGF_NODE@global(親ノード) //親ノードに対しても繰り返す
	}
	return
#global

#module
#defcfunc 対応する括弧まで取得 str ss, var index, str s1, str s2, var result
	s = ss
	;if strmid(s,index,1) != s1: sgf_err = "指定位置が開始文字で始まっていません SGF解析エラー"
	counter = 0
	repeat , index
		t = strmid(s,cnt,1)
		;if t == "": sgf_err = "括弧が閉じられていません SGF解析エラー"
		if t == s1{
			counter++
		}else:if t == s2{
			counter--
		}
		if counter == 0: r2 = cnt: break
	loop
	result = strmid(s, index + 1, r2 - index - 1)
	return r2
#defcfunc 対応する文字まで取得 var ss, int index, str s1, var result

	i = instr(ss,index,s1)
	;if i == -1: sgf_err = "対応する文字が見つからない SGF解析エラー"
	result = strmid(ss,index,i)
	return index + i
#global


#module

#defcfunc make_SGFnode int nownode, array coordinate, str 手番

	new = nownode

	座標 = "  "
	poke 座標, 0, 'a' + coordinate
	poke 座標, 1, 'a' + coordinate.1

	if nownode >= 0{
		if serch_SGFchild_byxy(nownode, 手番, 座標) >= 0{
			return stat //すでにノードが存在
		}
	}
	
	make_new_SGFnode nownode
	new = stat
	if nownode >= 0: add_SGFchild nownode, new
	set_property_data new, 手番, 座標
		
	return new
	
#defcfunc load_sgf str ss, int node
	
	onerror *er
	sss = ss
	sgf_err = ""
	if peek(sss) != '('{
		sgf_err = "(で始まっていません"
		return -1
	}
	stack = -1
	nln = 0
	load_sgf_main ss, node
	onerror 0
	return stat
*er
	dialog "エラーコード = "+err+"\n 総ノード数 -> " + length(SGF_NODE@global) + "\n 棋譜数 -> " + next_kifuload_index@,, __FILE__
	end

#deffunc load_sgf_main str ss, int node, local sgfs, local point, local nn
	sgfs = ss
	nn = node
	
	//解析
	while strmid(sgfs, point, 1) != ""
		
		token = peek(sgfs, point)

		if token >= 'A' && token <= 'Z'{

			point = 対応する文字まで取得(sgfs, point, "[", P) + 1
			point = 対応する文字まで取得(sgfs, point, "]", D) + 1
			set_property_data nn, P, D
			
		}else:if token = '('{
			
			point = 対応する括弧まで取得(sgfs, point, "(", ")", f) + 1
			load_sgf_main f, nn
			
		}else:if (token == ';'){

			make_new_SGFnode nn
			
			new_id = stat

			stack(nln) = new_id: nln++

			if nn >= 0{
				add_SGFchild nn, new_id
			}
			nn = new_id
			point++
			
		}else{

			logmes "不正なトークンが含まれています"
			
			point++
			
		}
	wend

	if sgf_err != "": return -1

	return stack
#global
#endif