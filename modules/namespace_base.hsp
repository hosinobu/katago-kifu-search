#ifndef hash_module
#module hash_module data, data_deleted_list, data_deleted_list_num, hashtable, hashcount,  データ数

#const MAX_KEYS 5000

#enum KEY = 0
#enum VALUE

#enum ENUM_MAX

#define global NOT_DEFINED_HASH "__undefined__"

#defcfunc local get_hash str s1
    #const SEED 0x811C9DC5
    t = s1
    s = SEED
    
    repeat length(t)
        s = (s ^ peek(t,cnt)) * 0x01000193
    loop
    
    return (s & 0x7FFFFFFF) \ MAX_KEYS

#modinit
	sdim data,,MAX_KEYS, ENUM_MAX
	dim data_deleted_list,,MAX_KEYS
	dim data_deleted_list_num
	
	dim hashcount, MAX_KEYS
	dim hashtable, MAX_KEYS

	mref thismod_ID, 2
	return thismod_ID


#modfunc hash_set str s1, str s2, int 作成はしない

	hash = get_hash(s1)

	for i,, hashcount(hash)
		if data(hashtable(hash, i), KEY) == s1{
			data(hashtable(hash ,i), VALUE) = s2
			return 1
		}
	next

	if 作成はしない: return 0

	if data_deleted_list_num{
		data_deleted_list_num--
		newid = data_deleted_list(data_deleted_list_num)
	}else{
		newid = データ数
	}
	
	data(newid, KEY) = s1
	data(newid, VALUE) = s2
	hashtable(hash, hashcount(hash)) = newid
	hashcount(hash)++
	
	データ数++

	return 1


#modcfunc hash_get str s1

	hash = get_hash(s1)
	
	for i,,hashcount(hash)
		if data(hashtable(hash, i), KEY) == s1{
			return data(hashtable(hash, i), VALUE)
		}
	next

	return NOT_DEFINED_HASH

#modfunc hash_del str s1

	hash = get_hash(s1)
	
	for i,, hashcount(hash)
	
		dup id, hashtable(hash, i)
		
		if data(id, KEY) == s1{
			
			data_deleted_list(data_deleted_list_num) == id
			data_deleted_list_num++

			hashcount(hash)--
			id = hashtable(hash, hashcount(hash))

			データ数--
			
			return
		}
	next
	
	return
	
#modcfunc hash_get_data_num

	return データ数

#global


#module hash_manager

#const MAX_NAMESPACES 200

#define global new_namespace(%1 = -1) _new_namespace(%1)
#deffunc _new_namespace int p1

	//現在のカレントidを保存
	tmp_parent_id = current_id

	if p1 >= 0{
		this_id = p1
		current_id = this_id
	}else{
		//実体を作成
		newmod data, hash_module
		this_id = stat
		current_id = this_id
		//親を設定
		parent(current_id) == -1
		hash_set_parent tmp_parent_id
		
		//子ノードリストを初期化
		init_childs_list childs(current_id)
	}

	//スタックに積む
	namespace_stack(namespace_stack_num) = this_id
	namespace_stack_num++
	
	return this_id

#deffunc break_namespace
	namespace_stack_num--
	current_id = namespace_stack(namespace_stack_num - 1) //一つ下の階層を取り出して設定
	return

#deffunc hash_set_parent int parent_id

	if parent(current_id) >= 0{
		//すでに親を設定済みなので、その親からこのノードを外す
		del_child_id childs(parent(current_id)), current_id
		//新しい親に登録
		add_child_id childs(parent_id), current_id
	}

	//親を登録
	parent(current_id) = parent_id
	return

#deffunc new_value str s1, str s2

	hash_set data(current_id), s1, s2
	return

#deffunc set_value str s1, str s2
	_set_value s1, s2, current_id
	return
#deffunc _set_value str s1, str s2, int id
	hash_set data(id), s1, s2, 1 //代入
	if stat == 0{
		//値がその空間に存在しなかった
		if parent(id) >= 0{
			_set_value s1, s2, parent(id)
			return
		}else{
			//最上位空間に到達した
			hash_set data(id), s1, s2 //最上位空間に作成
		}
	}
	return

#defcfunc get_value str s1
	return _get_value(s1, current_id)
	
#defcfunc _get_value str s1, int id
	result = hash_get(data(id), s1)
	if result == NOT_DEFINED_HASH{
		if parent(id) >= 0{
			return _get_value(s1, parent(id))
		}
	}

	return result


#defcfunc get_current_id
	return current_id
#deffunc set_current_id int p1
	current_id = p1
	return
	
#deffunc init_hash_manager
	dim parent, MAX_NAMESPACES
	dim namespace_stack, MAX_NAMESPACES
	sdim childs, MAX_NAMESPACES
	current_id = -1
	new_namespace
	return
#global
init_hash_manager


#module child_list_manager

#deffunc init_childs_list var a
	a = ","
	return
	
#deffunc del_child_id var a, int id

	s = str(id)
	t = instr(a,,"," + s + ",")
	if t >= 0{
		a = strmid(a, 0, t) + strmid(a, t + strlen(s) + 1 , $FFFF)
	}
	return
	
#deffunc add_child_id var a, int id
	if instr(a,,"," + id + "," ) == -1{
		a += "" + id + ","
		return
	}
	return
	
#global

#endif


#if 0
	new_value "A","親の変数１"
	new_value "B","親の変数２"
	new_value "Z","fafa"
	
	new_namespace: t = stat 
		//親空間参照
		mes get_value("A")

		new_value "C","testvalue"
		new_value "C","testvalue2"

		new_namespace: z = stat
			//変数宣言
			new_value "A","子の変数"
			mes get_value("A")
	
			//変数を書き換える
			set_value "A","hogehoge" //子に存在
			set_value "B","書き換えたよ" //親に存在する

			mes get_value("C")
		break_namespace

	break_namespace

	mes get_value("A")
	mes get_value("B")

	new_namespace
		new_value "T","hoyoyo"
		new_namespace z //定義された時点の空間状態になる
			mes get_value("T")
			mes get_value("Z")
			mes get_value("C")
			set_value "T","new"
		break_namespace
		mes get_value("T")
#endif