
#ifndef scroll
#include "keyfps.hsp"

#module scroll px, py, size, tickness, value_min, value_max, min_tumami_size, direction

#modinit int x, int y, int 長さ, int 太さ, int 下限, int 上限
	// 基準点
	px = x
	py = y
	
	size = 長さ
	tickness = 太さ

	value_min = 下限
	value_max = 上限

	min_tumamisize = 5

	direction = 1 | 2

	return
#modfunc draw_scroll_bar int draw_value_flag, int out_of_area_flag

	if _getkey(1) >= 1{
		if out_of_area_flag == 0{
			set_b thismod
		}
	}

	//

	horizontal = ((direction & 1)!=0)//縦か横か
	normal = ((direction & 2)!=0) * 2 - 1 //xy座標進行方向と同じ向きか
	frip = ((direction & 4)!=0) * 2 - 1 //裏返し（幅に適用)
	reverse = ((direction & 8)!=0) //基準点の値が、大きいほうなのか、小さいほうなのか

	if value_min > value_max{
		swap value_min, value_max
	}

	//つまみのサイズ算出
	tumamisize = limit(size / (value_max - value_min + 1), min_tumamisize, size)

	//基準点からつまみまでの距離
	if reverse{
		bar_position = (value_max - value) * (size - tumamisize) / (value_max - value_min)
	}else{
		bar_position = (value - value_min) * (size - tumamisize) / (value_max - value_min)
	}
	
	if horizontal{
		color 0, 0, 0
		boxf px , py, px + size * normal, py + tickness * frip
		color 250
		boxf px + bar_position * normal, py, px + (bar_position + tumamisize) * normal, py + tickness * frip
	}else{
		color 0, 0, 0
		boxf px , py, px + tickness * frip, py + size * normal
		color 250
		boxf px, py + bar_position * normal, px + tickness * frip, py + (bar_position + tumamisize) * normal
	}


	if draw_value_flag{
		//基準点に値を描画	
		pos px, py
		mes value
	}	
		
	return

#modfunc set_position_scroll_bar int p1, int p2

	px = p1
	py = p2
	return
#modfunc set_v int p1
	value = limit(p1,value_min,value_max)
	return
#modfunc set_value_minmax int p1, int p2
	value_min = p1
	value_max = p2
	return
	
#modfunc set_direction int p1
	direction = p1
	return
#modcfunc get_direction
	return direction
	

#modfunc set_size_scroll_bar int p1
	size = p1
	return
#modfunc set_tickness_scroll_bar int p1
	tickness = p1
	return
#modcfunc get_v
	return value
	
#modfunc set_b

	horizontal = ((direction & 1)!=0)//縦か横か
	normal = ((direction & 2)!=0) * 2 - 1 //xy座標進行方向と同じ向きか
	frip = ((direction & 4)!=0) * 2 - 1 //裏返し（幅に適用)
	reverse = ((direction & 8)!=0) //基準点の値を、大きいほうにするか小さいほうにするか
	if value_min > value_max{
		swap value_min, value_max
	}

	//つまみのサイズ算出
	tumamisize = limit(size / ( value_max - value_min + 1), min_tumamisize)

	if horizontal{
		基準点からの距離_X = mousex - px
		if reverse{
			value = value_max - 基準点からの距離_X * (value_max - value_min) * normal / (size - tumamisize)
		}else{
			value = value_min + 基準点からの距離_X * (value_max - value_min) * normal / (size - tumamisize)
		}
	}else{
		基準点からの距離_Y = mousey - py
		if reverse{
			value = value_max - 基準点からの距離_Y * (value_max - value_min) * normal / (size - tumamisize)
		}else{
			value = value_min + 基準点からの距離_Y * (value_max - value_min) * normal / (size - tumamisize)
		}		
	}
	value = limit(value, value_min, value_max)
	
	return
	
#deffunc local swap var a, var b
	tmp = a
	a = b
	b = tmp
	return
	
#global
#endif

#if 0

newmod b,scroll, 200,200, 180,20, 12,1200

set_v b, 300

*main
		manage_keyfps
	color 250,250,250:boxf:color
	draw_scroll_bar b,1

	mw = mousew
	
	if mw > 0{
		set_v b, get_v(b) + 1
	}
	if mw < 0{
		set_v b, get_v(b) - 1
	}

	stick key
	if key & 512{
		//キー入力されたら
		set_direction b, (get_direction(b) + 1) \ 16
	}
	

	redraw: redraw 2
	goto*main
#endif