#ifndef hash_module
#module hash_module data, data_opened_list, data_opened_list_num, hashtable, hashcount,  データ数, parent, childs

#const MAX_KEYS 5000

#enum KEY = 0
#enum VALUE

#enum ENUM_MAX


#defcfunc local get_hash str s1
    #const SEED 0x811C9DC5
    t = s1
    s = SEED
    
    repeat length(t)
        s = (s ^ peek(t,cnt)) * 0x01000193
    loop
    
    return (s & 0x7FFFFFFF) \ MAX_KEYS

#modinit
	sdim data,,MAX_KEYS, ENUM_MAX
	dim data_opend_list,,MAX_KEYS
	dim data_opend_list_num
	
	dim hashcount, MAX_KEYS
	dim hashtable, MAX_KEYS

	dimtype childs, 5

	mref thismod_ID, 2
	return thismod_ID


#modfunc hash_set str s1, str s2, int 親空間も対象に含める, int 親空間に見つからないとき自空間に作成する

	h = get_hash(s1)

	assign_value thismod, s1, s2, h, 親空間も対象に含める, 親空間に見つからないとき自空間に作成する

	if stat == 0{
		make_new_key thismod, s1, s2, h
	}

	return


#modfunc local assign_value str s1, str s2, int hash, int 親空間も対象に含める, int 親空間に見つからないとき自空間に作成する
//returnvalue :  1 == 変数が作成されたか、見つかって代入された。 0 == 変数が見つからず、なにもされていない。

	for i,, hashcount(hash)
		if data(hashtable(hash, i), KEY) == s1{
			data(hashtable(hash ,i), VALUE) = s2
			return 1
		}
	next

	if 親空間も対象に含める{
		if vartype(parent) == 5{
			assign_value parent, s1, s2, hash, 親空間も対象に含める, 親空間に見つからないとき自空間に作成する
			return stat
		}
		if 親空間に見つからないとき自空間に作成する == 0{
			//ルート空間に作成
			make_new_key thismod, s1, s2, hash
			return 1
		}
	}

	return 0

#modfunc local make_new_key str s1, str s2, int hash

	if data_deleted_list_num{
		data_deleted_list_num--
		newid = data_deleted_list(data_deleted_list_num)
	}else{
		newid = データ数
	}
	
	data(newid, KEY) = s1
	data(newid, VALUE) = s2
	hashtable(hash, hashcount(hash)) = newid
	hashcount(hash)++
	
	データ数++
	
	return



#modcfunc hash_get str s1

	hash = get_hash(s1)
	
	for i,,hashcount(hash)
		if data(hashtable(hash, i), KEY) == s1{
			return data(hashtable(hash, i), VALUE)
		}
	next

	if vartype(parent) == 5{
		return hash_get(parent, s1)
	}

	return "__undefined__"

#modfunc hash_del str s1

	hash = get_hash(s1)
	
	for i,, hashcount(hash)
	
		dup id, hashtable(hash, i)
		
		if data(id, KEY) == s1{
			
			data_deleted_list(data_deleted_list_num) == id
			data_deleted_list_num++

			hashcount(hash)--
			id = hashtable(hash, hashcount(hash))

			データ数--
			
			return
		}
	next

	if vartype(parent) == 5{
		hash_del parent, s1
	}
	
	return
	
#modcfunc hash_get_data_num

	return データ数

#modfunc hash_set_parent var a
	parent = a
	return

#modfunc hash_remove_parent
	parent = 0
	return

#modfunc hash_module_add_child var a
	newmod childs, hash_module
	a = childs(stat)
	hash_set_parent a, thismod
	return
#modterm
	foreach childs
		delmod childs.cnt
	loop
	return
#global
#endif

newmod a, hash_module

hash_module_add_child a, b
hash_module_add_child b, c // a -> b -> c

hash_set c, "key1", "value1", 1, 1 //親空間にもない時、この空間に作成
hash_set c, "key2", "value2", 1    //親空間にもない時、最上位空間に作成
hash_set c, "key2", "value3"       //親空間を考慮しない。つまり変数宣言みたいなもの。

mes hash_get(a, "key1") + hash_get(b, "key1") + hash_get(c, "key1")　//-> undefinedundefinedvalue1
mes hash_get(a, "key2") + hash_get(b, "key2") + hash_get(c, "key2")  //-> value2value2value3
