#ifndef memorize_hit_rect
#module

#const UNMEMORIZED -9999

#defcfunc memorize_hit_rect int rotate_pattern, int x, int y, array pattern, var v
	if memory(0,rotate_pattern, x, y) == UNMEMORIZED{
		memory(0,rotate_pattern, x, y) = -1, -1
		for j,, length(pattern)
			split pattern(j, 0, 0, rotate_pattern),",", rect
			if in_rect(rect, x, y){
				memory(0,rotate_pattern, x, y) = j
				split pattern(j, 1, 0, rotate_pattern),"-", stones
				for i,,int(pattern(j, 2, 0, rotate_pattern))
					split stones(i), ":", tmp
					p_x = int(tmp)
					p_y = int(tmp.1)
					if (p_x == x): if(p_y == y){
						memory(1,rotate_pattern,x,y) = i
						_break
					}
				next
				_break
			}
		next
	}
	v = memory(1,rotate_pattern,x,y)
	onerror 0
	return memory(0,rotate_pattern, x, y)
	return
#defcfunc local in_rect array a, int x, int y
	return (int(a) <= x) && (int(a(1)) <= y) && (int(a(2)) >= x) && (int(a(3)) >= y)

#deffunc init_mem
	dim memory,2, 8, 99, 99
	dim minus ,2, 8, 99, 99
	for i,,99
		for j,,99
			for k,,8
				minus(0, k,i,j) = UNMEMORIZED,UNMEMORIZED
			next
		next
	next
	minus_size = varsize(minus)
	clear_mem
	return
#deffunc clear_mem
	logmes "clear_mem called"
	memcpy memory, minus, minus_size
	return
#global
init_mem
#endif